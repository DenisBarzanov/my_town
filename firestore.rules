rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    match /issues/{issueId} {

      function isOwner() {
        return resource.data.ownerId == request.auth.uid
      }

      function isBeingCreatedByOwner() {
        return request.resource.data.ownerId == request.auth.uid
      }

      allow read;
      allow update: if isOwner();
      allow create: if isBeingCreatedByOwner();
      allow delete: if isAdmin() || isOwner();
    }

    match /issue-votes/{voteId} {
      function isOwner() {
        return resource.data.userId == request.auth.uid
      }
      function isCreatingWithOwnData() {
        return request.resource.data.userId == request.auth.uid;
      }
      allow read;
      allow update: if isOwner();
      allow create: if isCreatingWithOwnData();
    }

    match /users/{userId} {
      function isOwnerOfExistingUser() {
        return resource.id == request.auth.uid
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwnerOf(userId) {
        return request.auth.uid == userId;
      }
      function containsPriviliges() {
        return request.resource.data.keys().hasAny(['roles']);
      }
      
      allow read;
      allow update: if isOwnerOfExistingUser() && (!containsPriviliges());
      allow create: if isSignedIn() && isOwnerOf(userId) && (!containsPriviliges());
    }
  }
}